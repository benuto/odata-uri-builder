import { IFilterClause } from "../models/IFilterClause";
import { FilterOperator, FilterValue } from "../models/Types";
import { CountByBuilder } from "./CountByBuilder";
import { FilterBuilder } from "./FilterBuilder";
import { GroupByBuilder } from "./GroupByBuilder";
import { OrderByBuilder } from "./OrderByBuilder";
export declare type PathExpression<TEntity, TProperty, TValue> = ((p: TEntity) => TValue) | TProperty;
export declare class Query<TEntity> {
    readonly group: GroupByBuilder<TEntity>;
    readonly order: OrderByBuilder<TEntity>;
    readonly countBy: CountByBuilder<TEntity>;
    private readonly usesQueryString;
    protected parts: string[];
    private _Filter;
    private _Group;
    private _Order;
    private _Expand;
    private _Select;
    private _CountBy;
    private _Count;
    private _IncludeTotalCount;
    private _Top?;
    private _Skip?;
    constructor(entitySet: string, pluralize?: boolean);
    filter<TProperty, TValue>(path: ((p: TEntity) => TValue), operator: FilterOperator, value: TValue): FilterBuilder<TEntity>;
    filter<TProperty extends keyof TEntity, TValue extends TEntity[TProperty]>(path: TProperty, operator: FilterOperator, value: TValue): FilterBuilder<TEntity>;
    filterCustom(path: string, operator: FilterOperator, value: FilterValue): FilterBuilder<TEntity>;
    addFilterClauses(...filterClauses: IFilterClause[]): FilterBuilder<TEntity>;
    expand<TProperty extends keyof TEntity, TValue>(...expressions: Array<PathExpression<TEntity, TProperty, TValue>>): Query<TEntity>;
    expandCustom(...paths: string[]): Query<TEntity>;
    select<TProperty extends keyof TEntity, TValue>(...expressions: Array<PathExpression<TEntity, TProperty, TValue>>): Query<TEntity>;
    selectCustom(...paths: string[]): Query<TEntity>;
    count(value?: boolean): Query<TEntity>;
    includeTotalCount(): Query<TEntity>;
    top(value: number): Query<TEntity>;
    skip(value: number): Query<TEntity>;
    toString(includeQueryString?: boolean): string;
    toUri(includeQueryString?: boolean): string;
    private pluralize;
}
